<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerShip1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
The ship has 3 levels of shooting power. 
It will collect power-ups and then get stronger, but only up to 3 levels.
*/

/*
The ship will start at the lowest level, and it will be able to achieve a maximum level of 3.
*/
powerUp = 0
powerUpMax = 3

//Change the speed
speedUp = 2

/* emulate the effect: hold down the button to shoot at a steady rate
   or you can tap the button to shoot faster
*/
firingDelay = 0;
firingDelayMax = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
steps are the FPS(speed of the room) 
and if your room is 30 FPS it will have 30 steps per second
so every step event is ran 30 times per second.

fps(frame per sec): number of CPU steps that GameMaker: Studio is actually completing in a second
*/

/*
allows to move the ship in 8 directions. It uses the built-in keyboard_check() function
to detect key presses, and then it moves the ship in the right direction.

Note: If you wanted to make the ship only move in 4 directions instead of 8, a series of if-else statements would have done the trick
*/

/*
In terms of the game loop, checking for keypresses each time through the loop, and if
you are holding a key down, it will move the ship 2 pixels in that direction
*/

/*
vk_up, vk_down, vk_left, and vk_right are built-in global variables 
whose values correspond to the keyboard key values

x and y are built-in variables that every object has
They define where the object's position is on the screen
*/

/*
"y+12", "y+16" is to compensate for the fact that the origin of our player ship sprite
is in the upper left corner
*/
if (keyboard_check(vk_up)){
   if (y&gt;0) y -= speedUp
}
if (keyboard_check(vk_down)){
   if (y + 12 &lt; room_height) y += speedUp
}
if (keyboard_check(vk_left)){
   if (x &gt; view_xview[0]) x -= speedUp
}
if (keyboard_check(vk_right)){
   if (x+16 &lt; view_xview[0] + view_wview[0]) x += speedUp
}

/*
when you press the "X" key, your ship fires a bullet
*/

/*
ord - to check for any of the letter (A-Z) or digit (0-9) keys, use the "ord" function.  This evaluates to a number that represents the key.  For special keys, like the arrow keys, 
      there are "constant" (unchangeable) variables defined for them, 
      like vk_up, vk_down, etc.
      
instance_create(xpos, ypos, object) - this is a very useful function!  
                                      As the name implies, 
                                      it creates an instance of the given object at the given position
Note: X has to be capitalized
*/
if (keyboard_check(ord('X'))){
   // add a firingDelay variable that ticks down while the key is pressed. And
   // when you let go of the key, it sets the delay to 0 so that as soon as you tap the key
   // again, you fire off a shot
   if ( firingDelay &gt; 0){
      firingDelay -= 1
   }else{
      instance_create(x, y, oPlayerShot1)
      firingDelay = firingDelayMax
   } 
}else{
      firingDelay = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oWall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oGame.reviveTimer = 20
instance_create(other.x, other.y, oExplosion)
global.pLives -= 1
if (global.pLives &lt; 0) oGame.state = 1
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oGame.reviveTimer = 20
global.pLives -= 1
if (global.pLives &lt; 0) oGame.state = 1
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
