<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// setup a alarm (i.e alarm0) to go off in 15 steps
alarm[0] = 15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Allows the alarm event (i.e. alarm 0) happens repeatedly
// further reference: http://docs.yoyogames.com/source/dadiospice/000_using%20gamemaker/events/alarm%20event.html
alarm[0] = 30

// create the oEnemyFlyer object
instance_create(view_xview[0] + view_wview[0],random(room_height), oEnemyFlyer)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Now that we have our wide room and our view, let's make the view scroll.

- A view is not tied to any particular object, 
- so to tell it to scroll, we'll have to create some sort of controller object.  
- Create an object called oGame.  
- This object will not only handle the screen scrolling, 
  but it will keep track of some other variables, like score, drawing the HUD, etc.  
  In a more complex game, you may want to have multiple controller objects, 
  each charged with a specific task.  
  But since this is a relatively simple game, we'll put it all in a single oGame object.
*/

/*
Each view has x,y coordinates that define where the view is by the upper left corner of the view

view_xview[] is an array that stores all  the x coordinates of all the views
(view_yview[] for y). view_xview[0] stores the x coordinate of view 0.
*/

//view to move right 1 pixel with each step
view_xview[0] += 1

//we want the player to scroll, too.
if (instance_exists(oPlayerShip)){ //ensure that the game does not crash if there is no oPlayerShip active in the room (we might if we destroy the player object when the player dies)
   oPlayerShip.x += 1
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
